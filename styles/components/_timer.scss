@use "../core/index" as core;

/* トースト */
.js-toast {
  position: fixed;
  right: 1rem;
  top: 1rem;
  width: 240px;
  height: auto;
  transform: translateX(0) translateY(0);
  background: #008000;
  color: #fff;
  text-align: center;
  padding: 0.5rem 1rem;
  border-radius: 0.75rem;
  opacity: 0;
  pointer-events: none;
  transition: opacity 5s ease-in, transform 5s ease-in;

  &--visible {
    opacity: 1;
    transform: translateX(230px) translateY(0);
    pointer-events: auto;
  }

  &--success {
    /* 色味 */
  }

  &--error {
    /* 色味 */
  }
}

// タイマーJS関係
body {
  :where(.is-active) {
    color: var(--t-accent);
  }

  .js-toast--visible {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
  }
}

.timer {
  width: 100%;
  min-height: 340px;
  margin: 0 auto;
  padding: 0 16px;

  &__grid {
    // 縦並べ
    &--vertical {
      display: grid;
      grid-template-rows: repeat(3, 1fr);
      grid-template-columns: 1fr;
      gap: clamp(8px, 1.5vmin, 16px);

      /* カウント → プリセット → 操作 → ボリューム、の縦並び */
      grid-template-areas:
        "count"
        "presets"
        "controls";

      /* 親要素 */
      width: 100%;
      place-content: center;
    }

    // 横並べ
    &--horizontal {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: auto;
      justify-content: center;
      align-items: center;
    }

    &--space {
      gap: clamp(8px, 2.2vw, 16px);
    }
  }

  // ① 数字ディスプレイのラッパー
  &__screen {
    grid-area: count;

    &--display {
      min-width: 5ch;
      max-width: 20vw;
      margin: 0 auto;
    }

    /* h1 カウントダウン表示 */
    &--count {
      display: inline-block;
      text-align: center;

      // ch は「0 の幅」を基準にした長さ
      width: 5ch;
      font-size: var(--count-size-normal);
      line-height: var(--t-txt-line-h);
      background: var(--count-bg);
      border-radius: var(--count-radius);
      padding-inline: 0.8rem;
      padding-block: 0.2rem;
      backdrop-filter: var(--count-filter);
    }
  }

  // ② プリセット群のラッパー → timer__presets
  &__presets {
    grid-area: presets;

    width: 20vw;
    margin: 0 auto;

    // 旧  .timer__presets, .timer__actions
    & div {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: auto;
      justify-content: center;
      align-items: center;
    }

    & span {
      display: block;
      white-space: nowrap;
    }
  }

  // * ③ 操作群のラッパー → timer__actions
  &__actions {
    grid-area: controls;

    width: 20vw;
    margin: 0 auto;

    &--bg {
      padding: clamp(4px, 2.592px + 0.376vw, 8px) 0;
      border: var(--action-line);
      border-radius: var(--action-radius-m);
      width: 100%;
      background: var(--action-bg);
      box-shadow: var(--action-bg-shadow);
    }
  }

  // ボタンの共通基礎<button> 操作ボタンのみ
  &__btn {
    position: relative;
    min-width: auto;
    min-height: auto;
    inline-size: 44px;
    block-size: 44px;
    display: inline-grid;
    place-items: center;
  }

  // * ②の各ボタン
  &__preset-btn {
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
    border: var(--preset-line);

    /* 円の大きさ */
    width: var(--preset-btn-width);
    aspect-ratio: 1 / 1;
    border-radius: 50%;
    text-align: center;
    background: var(--preset-bg-current);
    color: var(--preset-fg-current);

    // 追加視認性UP
    filter: var(--preset-shadow);

    /* 内縁ハイライト + 外側の落ち影（ガラスと統一） */
    box-shadow: var(--preset-glass);
    position: relative;
    transition: background 0.18s ease, box-shadow 0.18s ease,
      transform 0.1s ease, color 0.18s ease;

    &::before {
      content: "";
      position: absolute;
      inset: 2px; /* 内側に1–2pxだけ入れる */
      border-radius: inherit;
      pointer-events: none;
      background: var(--preset-gloss);
      mask: var(--preset-mask);
    }

    /* 共有状態（hover / is-active / aria-pressed） */
    &:is(:hover, .is-active, [aria-pressed="true"]) {
      --preset-bg-current: color-mix(
        in oklch,
        var(--preset-bg) 18%,
        rgba(255, 255, 255, 0.337) 6%
      );
      --preset-fg-current: var(--t-complementary-color);
      transform: translateY(-0.5px);
      box-shadow: 0 0 0 2px rgb(14 16 32 / 75%),
        0 0 0 3px rgb(255 255 255 / 45%), inset 0 0 0 1px rgb(255 255 255 / 30%),
        0 8px 24px rgb(0 0 0 / 25%);
    }
    /* “選択保持”の方を一段強く */
    &.is-active,
    &[aria-pressed="true"] {
      --preset-bg-current: color-mix(in oklch, var(--preset-bg) 80%, white 20%);
    }
  }

  // ③の各ボタン
  &__action-btn {
    margin: 0 auto;

    //.set-buttons span
    &--rim {
      white-space: nowrap;
      // 追加視認性UP
      filter: var(--t-drop-shadow);

      /* ほんのり輪郭 */
      outline: var(--action-outline);
      outline-offset: -2px;
      border-radius: var(--action-radius-rim);
    }

    &--paused,
    &--muted {
      display: none;
    }
  }

  &__action-play[aria-pressed="true"] .timer__action-btn--running,
  &__action-volume[aria-pressed="true"] .timer__action-btn--alarm-on {
    display: none;
  }

  &__action-play[aria-pressed="true"] .timer__action-btn--paused,
  &__action-volume[aria-pressed="true"] .timer__action-btn--alarm-off {
    display: block;
  }

  // SVGを包む <span> に timer__icon
  &__icon {
    grid-area: 1/1;
    width: 100%;
    height: 44px;
  }

  // span　など数字/文字を持つ要素
  &__label {
    font-family: "M PLUS 1p", system-ui;
  }

  // 修飾（状態・見た目）
  // 等幅数字
  &__screen--tnum {
    font-family: Inter, system-ui;

    // 等幅数字（桁ごとに同じ幅）をON
    font-variant-numeric: tabular-nums; /* 等幅数字 */
    font-feature-settings: "tnum" 1; /* 念のため保険として */
    // フォントにその太さ/斜体が無いとき、ブラウザが“偽ボールド/偽イタリック”を合成するのを禁止
    font-synthesis: none; /* 擬似ボールド/イタリックを抑止して質感維持 */ /* “leaf.loop”の空気感に合わせて極小トラッキング */
    font-weight: 500;
    letter-spacing: 0.0125em;
    color: var(--milk-white);

    // ※ 影の数を増やすより、**半径と不透明度の“比率”**が大事。強すぎたら .03/.15/.36 くらいに全部落とす。
    text-shadow: var(--count-shadow);
  }
}

/* タイマー共通の「色・透明度・ホバー/フォーカス強度」をカスタムプロパティで持つ */
// 🌳 メイン タイマー
// centerアイテム1番目：heroタイマー
// 📍 幅1100px以上の横向き時だけ
@media screen and (width >= 1100px) and (orientation: landscape) {
  // 新規 timer ブロック
  .timer {
    max-width: 21vw;
    min-width: 21vw;
    height: auto;
    display: flex;
    align-items: center;
    justify-content: center;

    &__grid {
      &--vertical {
        grid-template-rows: 3fr 1fr 1fr;
        gap: 20px;
        margin: 0 auto;
        align-items: center;
      }
    }
  }
}
// ━━━━━━
// 📍📍 幅769px以上1099px以下で画面が横向きの時だけ
@media screen and (width <= 1099px) and (width >= 769px) and (orientation: landscape) {
  // 新規 timer ブロック
  .timer {
    padding: 0;
    min-width: 21vw;
    height: 100vh; /* PCで全画面 */
    height: 100svh; /* モバイルでアドレスバー考慮 */
    display: flex;
    align-items: center;
    justify-content: center;

    &__grid {
      &--vertical {
        grid-template-rows: 3fr 1fr 1fr;
        gap: 20px;
        margin: 0 auto;
        align-items: center;
      }
    }
    // ① 数字ディスプレイのラッパー
    &__screen {
      &--count {
        font-size: var(--count-size-smaller);
      }
    }
    // ② プリセット群のラッパー
    &__presets {
      width: 100%;
      margin: 0;
    }

    //   タイマー子③：操作（コントロール）ボタン
    &__actions {
      &--bg {
        padding: 0;
        border-radius: var(--action-radius-s);
      }
    }
  }
}
// ━━━━━━

/* 縦向き：最小値をちょい上げて読みやすさ優先 */
@media screen and (width <= 1024px) and (orientation: portrait) {
  // 新規 timer ブロック 縦向き
  .timer {
    width: 100vw;
    min-height: auto;
    min-width: fit-content;
    padding: 16px;

    &__grid {
      &--vertical {
        grid-template-rows: 3fr 1fr 1fr;
        gap: clamp(16px, 1.5vmin, 20px);
        align-items: center;
      }
    }

    // ① 数字ディスプレイのラッパー
    &__screen {
      // div
      &--display {
        max-width: fit-content;
      }

      &--count {
        width: max-content;
        display: block;
      }
    }

    // ② プリセット群のラッパー buttons
    &__presets,
    &__actions {
      width: 100%;
      max-width: 19rem;
      &--bg {
        width: 100%;
      }
    }

    // setTimeBtn 3/4/5
    &__preset-btn {
      min-inline-size: clamp(48px, 11vw, 72px);
      min-block-size: clamp(44px, 9vw, 60px); /* 44pxルール */
      padding-inline: 0.6rem;
      line-height: var(--t-txt-line-h);
    }
  }
}
// ━━━━━━
// 📍📍📍 幅768px（スマホ横向き）以下
@media screen and (width <= 768px) and (orientation: landscape) {
  // 新規 timer ブロック
  .timer {
    padding: 0;
    min-height: 375px;
    height: 100vh; /* PCで全画面 */
    height: 100svh; /* モバイルでアドレスバー考慮 */
    display: flex;
    align-items: center;
    justify-content: center;

    &__grid {
      &--vertical {
        grid-template-rows: 2fr 1fr 1fr;
        align-items: center;
        gap: 16px;
      }
    }

    &__screen {
      &--display {
        max-width: fit-content;
      }
    }

    &__actions {
      width: 100%;
      &--bg {
        width: 100%;
      }
    }

    &__screen {
      height: auto;
    }

    // 幅を文字に合わせる
    &__screen--count {
      width: max-content;
      display: block;
    }

    &__presets {
      width: 100%;
      padding: 0 8px;
    }

    &__preset-btn {
      margin: 0; /* ← これが肝！ */
      flex: 0 0 auto; /* 勝手に伸びない */
      min-inline-size: clamp(48px, 11vw, 72px);
      min-block-size: clamp(44px, 9vw, 60px); /* 44pxルール */
      padding-inline: 0.6rem;
      // border-radius: 999px;
      line-height: var(--t-txt-line-h);
    }
  }
}

/* hover（マウス環境だけ少しだけ持ち上げる） */
@media (hover: hover) and (pointer: fine) {
  .timer {
    // 3/4/5 ボタン
    &__preset-btn {
      &:hover {
        cursor: pointer;
        color: var(--t-complementary-color);
        border: var(--preset-bg-accent);
        background: var(--t-main-color);
        outline: none;
        box-shadow: 0 0 0 2px rgb(14 16 32 / 75%),
          /* 外側に暗い縁 */ 0 0 0 3px rgb(255 255 255 / 45%),
          /* その外に明るい縁 */ inset 0 0 0 1px rgb(255 255 255 / 30%),
          0 8px 24px rgb(0 0 0 / 25%);
        transform: translateY(-0.5px);
      }
    }

    // 操作ボタン
    &__action-btn {
      &:hover {
        cursor: pointer;
        color: #fff;
        text-shadow: 0 4px 4px #000;
        transform: scale(1.02);
        outline: var(--action-outline-hover);
      }
    }
  }
}

/* 論理プロパティ非対応ブラウザへのフォールバック */
@supports not (min-inline-size: 1px) {
  .timer {
    &__preset-btn {
      min-width: clamp(48px, 11vw, 72px);
      min-height: clamp(44px, 9vw, 60px);
    }
  }
}
